<?xml version="1.0" encoding="utf-8"?>
<!-- All Rights Reserved. Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
    Required properties:
      IbcOptimizationDataDir           The directory containing IBC optimization data.
  -->
  <PropertyGroup>
    <_OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(IbcOptimizationDataDir)$(TargetName).pgo'))</_OptimizationDataFile>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <!--
    We need to write out this sentinel file so that when ApplyOptimizations runs and compares the intermediate assemby location
    against itself the PostCompileBinaryModificationSentinelFile will have a newer timestamp allowing the target to be run.
  -->
  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="_InitializeAssemblyOptimizationWithTargetAssembly;ApplyOptimizations"
          Condition="Exists('$(_OptimizationDataFile)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_InitializeAssemblyOptimizationWithTargetAssembly">
    <ItemGroup>
      <OptimizeAssembly Include="@(IntermediateAssembly)" PgoFile="$(_OptimizationDataFile)">
    </ItemGroup>
  </Target>

  <Target Name="ApplyOptimizations"
          Condition="'@(OptimizeAssembly)' != '')"
          Inputs="@(OptimizeAssembly);@(OptimizeAssembly->'%(PgoFile)')"
          Outputs="@(OptimizeAssembly)">

    <PropertyGroup>
      <_RunIbcMerge>false</_RunIbcMerge>
      <_RunIbcMerge Condition="'$(Configuration)' == 'Release' and '$(OfficialBuild)' == 'true'">true</_RunIbcMerge>

      <_IbcMergePath>$(NuGetPackageRoot)microsoft.dotnet.ibcmerge\$(MicrosoftDotNetIBCMergeVersion)\lib\net45\ibcmerge.exe</_IbcMergePath>
      <_IbcMergeCommandLineArgs>-q -f -partialNGEN -minify -mo "%(OptimizeAssembly.Identity)" -incremental "%(OptimizeAssembly.PgoFile)"</_IbcMergeCommandLineArgs>
    </PropertyGroup>

    <Message Text="IBCMerge tool will be run in an official build with arguments: $(_IbcMergeCommandLineArgs)" Condition="'$(_RunIbcMerge)' != 'true'" Importance="normal"/>

    <Exec Command='"$(_IbcMergePath)" $(_IbcMergeCommandLineArgs)' ConsoleToMSBuild="true" Condition="'$(_RunIbcMerge)' == 'true'">
      <Output TaskParameter="ConsoleOutput" PropertyName="IbcMergeOutput" />
    </Exec>

    <Message Text="$(IbcMergeOutput)" />
  </Target>

</Project>